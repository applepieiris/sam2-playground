import os 
import cv2
import numpy as np
from argparse import ArgumentParser
import sys
def merge_masks(mask_dir, output_path):
    mask_files = [f for f in os.listdir(mask_dir) if f.endswith(".png")]
    merged_mask = None

    for mask_file in mask_files:
        mask_path = os.path.join(mask_dir, mask_file)
        mask = cv2.imread(mask_path, cv2.IMREAD_GRAYSCALE)

        # 转化为0/1
        mask = (mask == 0).astype(np.uint8)

        if merged_mask is None:
            merged_mask = mask
        else:
            merged_mask = cv2.bitwise_or(merged_mask, mask)

    merged_mask = (merged_mask > 0).astype(np.uint8)  # 最终二值化

    merged_mask = merged_mask
    # 保存为二值图（0/1)
    cv2.imwrite(output_path, merged_mask)
    
    print(f"✅ Merged mask saved to {output_path}")

    return merged_mask

def extract(original_image_path, merged_mask, output_path):
    # 读取原图（BGR）
    image = cv2.imread(original_image_path, cv2.IMREAD_COLOR)  # shape: H x W x 3

    # 扩展 alpha 通道：0（透明）或 255（不透明）
    alpha = (merged_mask * 255).astype(np.uint8)
    # 转换 image 到 RGBA
    bgr = image[:, :, :3]
    rgba = cv2.cvtColor(bgr, cv2.COLOR_BGR2BGRA)  # shape: H x W x 4
    rgba[:, :, 3] = alpha  # 把 mask 设置为 alpha 通道

    cv2.imwrite(output_path, rgba)
    print(f"✅ Extracted image saved to {output_path}")

if __name__ == "__main__":
    parser = ArgumentParser(description="Merge mask results Generated by SAM2")
    parser.add_argument("--sam2_mask_dir", type=str, default="./outputs/masks")
    parser.add_argument("--original_image_path", type=str, default="./raw_data/bskt1/input/01.png")
    parser.add_argument("--mask_output_dir", type=str, default="./merged_mask")
    parser.add_argument("--reverse_mask", action="store_true", default=True)
    
    args = parser.parse_args(sys.argv[1:])

    name, _ = os.path.splitext(os.path.basename(args.original_image_path))
    
    os.makedirs(os.path.join(args.mask_output_dir, name), exist_ok=True)
    
    # Merge the masks generated by sam2 which is stored in ./outputs/masks
    merged_mask = merge_masks(args.sam2_mask_dir, os.path.join(args.mask_output_dir, name, 'merged_mask.png'))
    
    # Generate the RGBA image, making the background with 100% opacity
    extract(args.original_image_path, merged_mask, os.path.join(args.mask_output_dir, name, 'foreground.png'))
    
    if args.reverse_mask:
        reversed_mask = 1 - merged_mask
        cv2.imwrite(os.path.join(args.mask_output_dir, name, 'reversed_mask.png'))
        extract(args.original_image_path, reversed_mask, os.path.join(args.mask_output_dir, name, 'background.png'))
    
    
    
    
    